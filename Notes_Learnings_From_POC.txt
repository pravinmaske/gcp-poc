
Airflow/Cloud Composer Notes:
-----------------------------
	Workloads configuration
	Scheduler: The Airflow scheduler parses DAG files, schedules DAG runs based on the schedule interval, and queues tasks for execution by Airflow workers.
	1 scheduler with 0.5 vCPU, 2 GB memory, 1 GB storage

	Triggerer: By enabling the Airflow triggerer, you can use deferrable operators in your DAGs
	1 triggerer with 0.5 vCPU, 0.5 GB memory, 1 GB storage

	Web server: Airflow web server runs the Airflow web interface where you can monitor, manage, and visualize your DAGs.
	0.5 vCPU, 2 GB memory, 1 GB storage

	Worker: Airflow workers execute tasks that are scheduled by the Airflow scheduler. The number of workers in your environment changes dynamically within the specified range, depending on the number of tasks in the queue.
	Autoscaling between 1 and 3 workers, with 0.5 vCPU, 2 GB memory, 1 GB storage each


Cloud Data Fusion Notes:
------------------------
	Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. 
	It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists 
	to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.

Faker Library:
--------------
	- Used to create fake data 
	- It provides data for testing 
	
-----------------------------------

I have authenticated my local code to Google cloud using my Default credentials which is called Application Default Credentials method or way.
But theres other way available if one dont want to use the ADC way. We can do that by Service Account Credentials way.

- Service Account Credentials are a way to authenticate your application or script to access Google Cloud services programmatically. 
- Service accounts are special Google accounts that belong to your application or a virtual machine instance, not to individual users.
- They are often used for server-to-server communication within a Google cloud environment or between Google Cloud and external systems.

Here's how we can user Service Account credentials:

1. Create a Service Account:
	First, you need to create a Service Account in the Google Cloud Console. You can do this by navigating to the IAM & Admin > Service accounts section.
	Click "Create Service Account", give it a name, and assign the necessary roles (permissions) to the service account based on what resources it needs to access.
	
2. 	Generate a JSON Key File:
	After creating the Service Account, you'll be prompted to generate a key for it. Choose JSON as the key type and click "Create". 
	This will download a JSON key file to your local machine. This JSON key file contains the credentials that your application will use to authenticate.

3. Set Environment Variable:
	Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to the path of the JSON key file. 
	This environment variable tells the Google Cloud client libraries where to find the credentials.
	You can set it in your terminal or command prompt before running your application:
		set GOOGLE_APPLICATION_CREDENTIALS=path/to/your/keyfile.json
4. Use Service Account Credentials in Your Application:
	In your Python script or application, you can use the Google Cloud client libraries to authenticate using the Service Account credentials.
	For example, if you're using the Google Cloud Storage client library, you can authenticate like this:
		from google.cloud import storage

		# Create a client using the Service Account credentials
		storage_client = storage.Client()
		
	The client library will automatically detect the GOOGLE_APPLICATION_CREDENTIALS environment variable and use the specified JSON key file for authentication.	
		
5. Access Resources:
	Once authenticated, you can use the client library to access and manage Google Cloud resources like 
	Google Cloud Storage buckets, BigQuery datasets, or Compute Engine instances.

- Using Service Access Credentials is a secure way to authenticate your applications and scripts with Google Cloud Services.
- Its especially useful for a server-to-server communication or when running applications in environment where iser interaction is not possible or practical	